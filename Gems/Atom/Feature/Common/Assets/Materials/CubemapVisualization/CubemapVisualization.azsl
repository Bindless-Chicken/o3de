/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include "Atom/Features/ShaderQualityOptions.azsli"
#include <viewsrg.srgi>

// SRGs
// #include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/PBR/ForwardPassSrg.azsli>
#include <scenesrg.srgi>

// Pass Output
#include <Atom/Features/PBR/ForwardPassOutput.azsli>
#include <Atom/Features/PBR/LightingUtils.azsli>


ShaderResourceGroup ObjectSrg : SRG_PerObject
{
    uint m_objectId;

    //! Returns the matrix for transforming points from Object Space to World Space.
    float4x4 GetWorldMatrix()
    {
        return SceneSrg::GetObjectToWorldMatrix(m_objectId);
    }

    //! Returns the inverse-transpose of the world matrix.
    //! Commonly used to transform normals while supporting non-uniform scale.
    float3x3 GetWorldMatrixInverseTranspose()
    {
        return SceneSrg::GetObjectToWorldInverseTransposeMatrix(m_objectId);
    }

    TextureCube m_cubemap;
    
    Sampler m_sampler
    {
        AddressU = Wrap;
        AddressV = Wrap;
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
    };
}

// ---------- Vertex Shader ----------

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
 
    // Extended fields (only referenced in this azsl file)...
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    // "centroid" is needed for SV_Depth to compile
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
    float2 m_uv : UV1;
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV2;
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

VSOutput CubemapVisualization_MainVS(VSInput IN)
{
    VSOutput OUT;

    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
    OUT.m_uv = IN.m_uv0;

    VertexHelper(IN, OUT, worldPosition, true);

    return OUT;
}


// ---------- Pixel Shader ----------

ForwardPassOutput CubemapVisualization_MainPS(VSOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    ForwardPassOutput OUT;

    float4 cubemap = ObjectSrg::m_cubemap.Sample(ObjectSrg::m_sampler, GetCubemapCoords(IN.m_normal));

#ifdef UNIFIED_FORWARD_OUTPUT
    OUT.m_color = float4(cubemap.xyz, 1.0);
#else
    OUT.m_diffuseColor = float4(cubemap.xyz, 1.0);
    OUT.m_specularColor = float4(cubemap.xyz, 1.0);
    OUT.m_specularF0 = float4(cubemap.xyz, 1.0);
    OUT.m_albedo = float4(cubemap.xyz, 1.0);
    OUT.m_normal = IN.m_normal.xyzz;
#endif
    return OUT;
}
